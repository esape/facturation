{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Service","title","quantity","unitPrice","from","to","id","date","VATRate","withoutTaxAmount","taxAmount","taxIncludedAmount","this","uuid","Invoice","invoiceNumber","client","services","paymentDate","reduce","acc","cur","defaultFormatted","x","Math","floor","isInt","toLocaleString","Number","toFixed","financeFormatted","style","currency","App","useState","setInvoiceNumber","Date","setDate","setPaymentDate","clientName","setClientName","clientAddress","setClientAddress","clientIntracommunautaryNumber","setClientIntracommunautaryNumber","clientInvoiceAddress","setClientInvoiceAddress","clientDeliveryAddress","setClientDeliveryAddress","undefined","newServiceStartDate","setNewServiceStartDate","newServiceEndDate","setNewServiceEndDate","newServiceDescription","setNewServiceDescription","newServiceQuantity","setNewServiceQuantity","newServiceUnitPrice","setNewServiceUnitPrice","setServices","invoice","setInvoice","askedForPrint","setAskedForPrint","addNewService","endDate","concat","e","alert","message","generatePrint","name","intracommunautaryNumber","address","join","invoiceAddress","deliveryAddress","useEffect","window","print","savedData","localStorage","getItem","previousInvoices","JSON","parse","setItem","stringify","className","type","onChange","event","target","value","Array","split","map","service","key","toLocaleDateString","onClick","preventDefault","confirm","filter","s","removeService","a","colSpan","rowSpan","round","padding","withoutTaxTotalAmount","taxTotalAmount","taxIncludedTotalAmount","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6576b566.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport DatePicker from 'react-date-picker'\nimport uuid from 'uuid'\nimport './App.sass'\n\nconst VAT_RATE = 0.2\n\ninterface Client {\n  name: string\n  address: string\n  intracommunautaryNumber: string\n  invoiceAddress: string\n  deliveryAddress: string\n}\n\nclass Service {\n  id: string\n  date: {\n    from?: Date\n    to?: Date | null\n  }\n  title: string\n  quantity: number\n  unitPrice: number\n  VATRate: number\n  withoutTaxAmount: number\n  taxAmount: number\n  taxIncludedAmount: number\n\n  constructor(\n    title: string,\n    quantity: number,\n    unitPrice: number,\n    from?: Date,\n    to?: Date | null,\n  ) {\n    this.id = uuid()\n    this.date = {\n      from,\n      to,\n    }\n    this.title = title\n    this.quantity = quantity\n    this.unitPrice = unitPrice\n\n    this.VATRate = VAT_RATE\n    this.withoutTaxAmount = quantity * unitPrice\n    this.taxAmount = this.withoutTaxAmount * this.VATRate\n    this.taxIncludedAmount = this.withoutTaxAmount + this.taxAmount\n  }\n}\n\nclass Invoice {\n  date: Date\n  invoiceNumber: string\n  client: Client\n  services: Service[]\n  paymentDate?: Date | null\n\n  constructor(\n    invoiceNumber: string,\n    date: Date,\n    client: Client,\n    services: Service[],\n    paymentDate?: Date | null,\n  ) {\n    this.invoiceNumber = invoiceNumber\n    this.date = date\n    this.client = client\n    this.services = services\n    this.paymentDate = paymentDate\n  }\n\n  withoutTaxTotalAmount() {\n    return this.services.reduce((acc, cur) => acc + cur.withoutTaxAmount, 0)\n  }\n\n  taxTotalAmount() {\n    return this.services.reduce((acc, cur) => acc + cur.taxAmount, 0)\n  }\n\n  taxIncludedTotalAmount() {\n    return this.services.reduce((acc, cur) => acc + cur.taxIncludedAmount, 0)\n  }\n}\n\nconst isInt = (x: number) => x - Math.floor(x) === 0\n\nconst percentFormatted = (x: number) => `${Math.round(x * 100)} %`\nconst defaultFormatted = (x: number) =>\n  isInt(x)\n    ? `${x.toLocaleString('fr-FR')}`\n    : `${Number(x.toFixed(2)).toLocaleString('fr-FR')}`\nconst financeFormatted = (x: number) =>\n  x.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' })\n\nconst App = () => {\n  const [invoiceNumber, setInvoiceNumber] = useState<string>('')\n  const [date, setDate] = useState<Date>(new Date())\n  const [paymentDate, setPaymentDate] = useState<Date | null>(null)\n  const [clientName, setClientName] = useState<string>('')\n  const [clientAddress, setClientAddress] = useState<string[]>([])\n  const [\n    clientIntracommunautaryNumber,\n    setClientIntracommunautaryNumber,\n  ] = useState<string>('')\n  const [clientInvoiceAddress, setClientInvoiceAddress] = useState<string[]>([])\n  const [clientDeliveryAddress, setClientDeliveryAddress] = useState<string[]>(\n    [],\n  )\n  const [newServiceStartDate, setNewServiceStartDate] = useState<\n    Date | undefined\n  >(undefined)\n  const [newServiceEndDate, setNewServiceEndDate] = useState<Date | undefined>(\n    undefined,\n  )\n  const [newServiceDescription, setNewServiceDescription] = useState<string>('')\n  const [newServiceQuantity, setNewServiceQuantity] = useState<string>('')\n  const [newServiceUnitPrice, setNewServiceUnitPrice] = useState<string>('')\n  const [services, setServices] = useState<Service[]>([])\n  const [invoice, setInvoice] = useState<Invoice | null>(null)\n  const [askedForPrint, setAskedForPrint] = useState<boolean>(false)\n\n  const resetNewServiceData = () => {\n    setNewServiceStartDate(undefined)\n    setNewServiceEndDate(undefined)\n    setNewServiceDescription('')\n    setNewServiceQuantity('')\n    setNewServiceUnitPrice('')\n  }\n\n  const addNewService = () => {\n    try {\n      // if (!newServiceStartDate)\n      //   throw new Error('La date de début est incorrecte')\n      const endDate = newServiceEndDate ? newServiceEndDate : null\n      // if (!newServiceDescription)\n      //   throw new Error('Il manque la description du service')\n      // eslint-disable-next-line no-useless-escape\n      // const numberValidator = /^\\d+[\\.|\\,]?\\d*$/\n      // if (!numberValidator.test(newServiceQuantity))\n      //   throw new Error('La quantité est invalide')\n      // if (!numberValidator.test(newServiceUnitPrice))\n      //   throw new Error('Le prix unitaire est invalide')\n      setServices(\n        services.concat([\n          new Service(\n            newServiceDescription,\n            Number(newServiceQuantity),\n            Number(newServiceUnitPrice),\n            newServiceStartDate,\n            endDate,\n          ),\n        ]),\n      )\n      resetNewServiceData()\n    } catch (e) {\n      alert(e.message)\n    }\n  }\n\n  const removeService = (service: Service) => {\n    const remove = window.confirm(\n      `Es-tu sûr de vouloir supprimer : ${service.title} ?`,\n    )\n    if (remove) {\n      setServices(services.filter(s => s.id !== service.id))\n    }\n  }\n\n  const generatePrint = () => {\n    try {\n      // if (!invoiceNumber) throw new Error('Il manque le numéro de facture')\n      // if (!paymentDate) throw new Error('Il faut choisir une date de paiement')\n      setInvoice(\n        new Invoice(\n          invoiceNumber,\n          date,\n          {\n            name: clientName,\n            intracommunautaryNumber: clientIntracommunautaryNumber,\n            address: clientAddress.join('\\n'),\n            invoiceAddress: clientInvoiceAddress.join('\\n'),\n            deliveryAddress: clientDeliveryAddress.join('\\n'),\n          },\n          services,\n          paymentDate,\n        ),\n      )\n      setAskedForPrint(true)\n    } catch (e) {\n      alert(e.message)\n    }\n  }\n\n  useEffect(() => {\n    if (invoice && askedForPrint) {\n      window.print()\n      setAskedForPrint(false)\n      const savedData = window.localStorage.getItem('invoices')\n      const previousInvoices: Invoice[] = savedData ? JSON.parse(savedData) : []\n      window.localStorage.setItem(\n        'invoices',\n        JSON.stringify(previousInvoices.concat([invoice])),\n      )\n    }\n  }, [invoice, askedForPrint])\n\n  return (\n    <div className='App'>\n      <div id='invoiceForm'>\n        <h2>Général</h2>\n        <div className='column generalInfo'>\n          <label>\n            <span className='bold'>Numéro de facture</span>\n            <input\n              className='border-black border-round height-30 mono'\n              type='text'\n              onChange={event => setInvoiceNumber(event.target.value)}\n              value={invoiceNumber}\n            />\n          </label>\n          <label>\n            <span className='bold'>Date de la facture</span>\n            <DatePicker\n              className='border-round border-black'\n              onChange={date =>\n                date instanceof Array ? setDate(date[0]) : setDate(date)\n              }\n              value={date}\n            />\n          </label>\n          <label>\n            <span className='bold'>Date de paiement</span>\n            <DatePicker\n              className='border-round border-black'\n              onChange={date =>\n                date instanceof Array\n                  ? setPaymentDate(date[0])\n                  : setPaymentDate(date)\n              }\n              value={paymentDate ? paymentDate : undefined}\n            />\n          </label>\n        </div>\n        <h2>Client</h2>\n        <div className='row'>\n          <div className='left column flex-end'>\n            <label>\n              <span className='bold'>Nom</span>\n              <input\n                className='border-black border-round height-30 mono'\n                type='text'\n                onChange={event => setClientName(event.target.value)}\n                value={clientName}\n              />\n            </label>\n            <label>\n              <span className='bold'>N° intracommunautaire</span>\n              <input\n                className='border-black border-round height-30 mono'\n                type='text'\n                onChange={event =>\n                  setClientIntracommunautaryNumber(event.target.value)\n                }\n                value={clientIntracommunautaryNumber}\n              />\n            </label>\n          </div>\n          <div className='right addressBox'>\n            <label>\n              <span className='bold'>Adresse</span>\n              <textarea\n                className='border-black border-round height-100'\n                onChange={event =>\n                  setClientAddress(event.target.value.split('\\n'))\n                }\n                value={clientAddress.join('\\n')}\n              />\n            </label>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='left addressBox'>\n            <label>\n              <span className='bold'>Adresse de facturation</span>\n              <textarea\n                className='border-black border-round height-100'\n                onChange={event =>\n                  setClientInvoiceAddress(event.target.value.split('\\n'))\n                }\n                value={clientInvoiceAddress.join('\\n')}\n              />\n            </label>\n          </div>\n          <div className='right addressBox'>\n            <label>\n              <span className='bold'>Adresse de livraison</span>\n              <textarea\n                className='border-black border-round height-100'\n                onChange={event =>\n                  setClientDeliveryAddress(event.target.value.split('\\n'))\n                }\n                value={clientDeliveryAddress.join('\\n')}\n              />\n            </label>\n          </div>\n        </div>\n        <h2>Prestations</h2>\n        <table>\n          <thead>\n            <tr>\n              <td>Début</td>\n              <td>(Fin)</td>\n              <td>Désignation de la prestation</td>\n              <td>Quantité</td>\n              <td>Prix unitaire</td>\n              <td>Action</td>\n            </tr>\n          </thead>\n          <tbody>\n            {services.map(service => {\n              return (\n                <tr key={service.id}>\n                  <td className='width-80'>\n                    {service.date.from &&\n                      service.date.from.toLocaleDateString()}\n                  </td>\n                  <td className='width-80'>\n                    {service.date.to && service.date.to.toLocaleDateString()}\n                  </td>\n                  <td className='width-040'>{service.title}</td>\n                  <td className='align-center'>{service.quantity}</td>\n                  <td className='align-center'>{service.unitPrice}</td>\n                  <td>\n                    <button\n                      className='removeService'\n                      onClick={event => {\n                        event.preventDefault()\n                        removeService(service)\n                      }}\n                    >\n                      -\n                    </button>\n                  </td>\n                </tr>\n              )\n            })}\n            <tr>\n              <td className='width-80'>\n                <DatePicker\n                  value={newServiceStartDate}\n                  onChange={date =>\n                    setNewServiceStartDate(\n                      date instanceof Array ? date[0] : date,\n                    )\n                  }\n                />\n              </td>\n              <td className='width-80'>\n                <DatePicker\n                  value={newServiceEndDate}\n                  onChange={date =>\n                    setNewServiceEndDate(date instanceof Array ? date[0] : date)\n                  }\n                />\n              </td>\n              <td className='width-040'>\n                <input\n                  type='text'\n                  className='border-black border-round height-30 full-width font-14'\n                  value={newServiceDescription}\n                  onChange={event =>\n                    setNewServiceDescription(event.target.value)\n                  }\n                />\n              </td>\n              <td className='align-center'>\n                <input\n                  type='number'\n                  className='border-black border-round height-30 mono width-80 font-14'\n                  value={newServiceQuantity}\n                  onChange={event => setNewServiceQuantity(event.target.value)}\n                />\n              </td>\n              <td className='align-center'>\n                <input\n                  type='number'\n                  className='border-black border-round height-30 mono width-80 font-14'\n                  value={newServiceUnitPrice}\n                  onChange={event => setNewServiceUnitPrice(event.target.value)}\n                />\n              </td>\n              <td>\n                <button\n                  id='addService'\n                  onClick={event => {\n                    event.preventDefault()\n                    addNewService()\n                  }}\n                >\n                  +\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <div className='footer'>\n          {/* {invoiceNumber && */}\n          {/* {paymentDate &&\n            clientName &&\n            // clientIntracommunautaryNumber &&\n            clientAddress.length &&\n            clientAddress[0] &&\n            !!services.length && ( */}\n              <button\n                id='printButton'\n                onClick={async () => {\n                  generatePrint()\n                }}\n              >\n                Imprimer la facture\n              </button>\n            {/* )} */}\n        </div>\n      </div>\n\n      {invoice && (\n        <div id='invoicePrint'>\n          <h1 className='title'>Facture</h1>\n          <div className='generalInfo'>\n            <div className='left'>\n              <div className='block'>\n                <p className='bold'>ESAPE</p>\n                <p>6 rue de Bois-Bernard</p>\n                <p>62580 NEUVIREUIL</p>\n              </div>\n              <div className='block'>\n                <p>SARL ESAPE</p>\n                <p>Au capital social de 22 500,00 euros</p>\n              </div>\n              <div className='block'>\n                <p>RCS ARRAS 812.462.307</p>\n                <p>TVA intracommunautaire: fr 33812462307</p>\n              </div>\n            </div>\n            <div className='right'>\n              <div className='block'>\n                <p className='align-right'>\n                  Date : {invoice.date.toLocaleDateString()}\n                </p>\n                <p className='align-right bold'>\n                  Facture n° {invoice.invoiceNumber}\n                </p>\n              </div>\n            </div>\n          </div>\n          <table>\n            <thead>\n              <tr>\n                <td colSpan={2} className='nowrap border-right'>\n                  Références client\n                </td>\n                <td className='nowrap border-right'>Adresse de facturation</td>\n                <td className='nowrap'>Adresse de livraison</td>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td className='align-right bold'>Nom :</td>\n                <td className='align-center border-right'>\n                  {invoice.client.name}\n                </td>\n                <td rowSpan={3} className='align-center border-right pre-line'>\n                  {invoice.client.invoiceAddress}\n                </td>\n                <td rowSpan={3} className='align-center pre-line'>\n                  {invoice.client.deliveryAddress}\n                </td>\n              </tr>\n              <tr>\n                <td className='align-right bold'>Adresse :</td>\n                <td className='align-center pre-line'>\n                  {invoice.client.address}\n                </td>\n              </tr>\n              <tr>\n                <td className='align-right nowrap bold'>\n                  N° intracommunautaire :\n                </td>\n                <td className='align-center'>\n                  {invoice.client.intracommunautaryNumber}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n\n          <table>\n            <thead>\n              <tr>\n                <td className='border-right'>Date</td>\n                <td className='border-right'>Désignation de la prestation</td>\n                <td className='border-right'>Quantité</td>\n                <td className='border-right'>Prix unitaire</td>\n                <td className='border-right'>Taux de TVA</td>\n                <td className='border-right'>Montant total HT</td>\n                <td className='border-right'>Montant TVA</td>\n                <td>Montant TTC</td>\n              </tr>\n            </thead>\n            <tbody>\n              {invoice.services.map(service => (\n                <tr key={service.id}>\n                  <td className='border-right'>\n                    {service.date.from &&\n                      service.date.from.toLocaleDateString()}\n                    {service.date.from &&\n                      service.date.to &&\n                      ` au ${service.date.to.toLocaleDateString()}`}\n                  </td>\n                  <td className='border-right'>{service.title}</td>\n                  <td className='nowrap align-center border-right'>\n                    {defaultFormatted(service.quantity)}\n                  </td>\n                  <td className='nowrap align-center border-right'>\n                    {financeFormatted(service.unitPrice)}\n                  </td>\n                  <td className='nowrap align-center border-right'>\n                    {percentFormatted(service.VATRate)}\n                  </td>\n                  <td className='nowrap align-right border-right'>\n                    {financeFormatted(service.withoutTaxAmount)}\n                  </td>\n                  <td className='nowrap align-right border-right'>\n                    {financeFormatted(service.taxAmount)}\n                  </td>\n                  <td className='nowrap align-right'>\n                    {financeFormatted(service.taxIncludedAmount)}\n                  </td>\n                </tr>\n              ))}\n              <tr>\n                <td\n                  className='border-right'\n                  style={{\n                    padding: 10,\n                  }}\n                ></td>\n                <td className='border-right'></td>\n                <td className='border-right'></td>\n                <td className='border-right'></td>\n                <td className='border-right'></td>\n                <td className='border-right'></td>\n                <td className='border-right'></td>\n                <td className='border-right'></td>\n              </tr>\n            </tbody>\n            <tfoot>\n              <tr>\n                <td className='nowrap border-right'>Totaux</td>\n                <td className='border-right'></td>\n                <td className='border-right'></td>\n                <td className='border-right'></td>\n                <td className='border-right'></td>\n                <td className='nowrap align-right border-right'>\n                  {financeFormatted(invoice.withoutTaxTotalAmount())}\n                </td>\n                <td className='nowrap align-right border-right'>\n                  {financeFormatted(invoice.taxTotalAmount())}\n                </td>\n                <td className='nowrap align-right border-right'>\n                  {financeFormatted(invoice.taxIncludedTotalAmount())}\n                </td>\n              </tr>\n            </tfoot>\n          </table>\n\n          <div className='maybe-page2'>\n            <div className='generalInfo padding-top-24'>\n              <div className='left'>\n                <table className='conditions'>\n                  <thead>\n                    <tr>\n                      <td colSpan={2}>Conditions de règlement</td>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td className='align-right'>Date de règlement :</td>\n                      <td className='align-center'>\n                        {invoice.paymentDate &&\n                          invoice.paymentDate.toLocaleDateString()}\n                      </td>\n                    </tr>\n                    <tr>\n                      <td className='align-right'>Mode de règlement :</td>\n                      <td className='align-center fluf'>Chèque ou virement</td>\n                    </tr>\n                    <tr>\n                      <td className='align-right'>Conditions d'escompte :</td>\n                      <td className='align-center'></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n              <div className='right'>\n                <table className='toPayTable'>\n                  <tbody>\n                    <tr>\n                      <td className='bold align-right'>Somme à payer (HT)</td>\n                      <td className='bold align-right'>\n                        {financeFormatted(invoice.withoutTaxTotalAmount())}\n                      </td>\n                    </tr>\n                    <tr>\n                      <td className='bold align-right'>TVA (20 %)</td>\n                      <td className='bold align-right'>\n                        {financeFormatted(invoice.taxTotalAmount())}\n                      </td>\n                    </tr>\n                    <tr>\n                      <td className='bold align-right'>Somme à payer (TTC)</td>\n                      <td className='bold align-right'>\n                        {financeFormatted(invoice.taxIncludedTotalAmount())}\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n\n            <p className='notice'>\n              En cas de retard, le taux d'intérêt des pénalités de retard +\n              montant de l'indemnité forfaitaire (40€) sera applicable\n              conformément à l'article L.441-6, alinéa 12 du Code du commerce\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}