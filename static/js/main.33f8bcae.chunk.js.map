{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Service","from","to","title","quantity","unitPrice","id","date","VATRate","withoutTaxAmount","taxAmount","taxIncludedAmount","this","uuid","Invoice","invoiceNumber","paymentDate","client","services","reduce","acc","cur","defaultFormatted","x","Math","floor","isInt","toLocaleString","Number","toFixed","financeFormatted","style","currency","App","useState","setInvoiceNumber","Date","setDate","setPaymentDate","clientName","setClientName","clientAddress","setClientAddress","clientIntracommunautariyNumber","setClientIntracommunautariyNumber","clientInvoiceAddress","setClientInvoiceAddress","clientDeliveryAddress","setClientDeliveryAddress","undefined","newServiceStartDate","setNewServiceStartDate","newServiceEndDate","setNewServiceEndDate","newServiceDescription","setNewServiceDescription","newServiceQuantity","setNewServiceQuantity","newServiceUnitPrice","setNewServiceUnitPrice","setServices","invoice","setInvoice","askedForPrint","setAskedForPrint","addNewService","Error","endDate","numberValidator","test","concat","e","alert","message","generatePrint","name","intracommunautaryNumber","address","join","invoiceAddress","deliveryAddress","useEffect","window","print","savedData","localStorage","getItem","previousInvoices","JSON","parse","setItem","stringify","className","type","onChange","event","target","value","Array","split","map","service","key","toLocaleDateString","onClick","preventDefault","confirm","filter","s","removeService","length","a","colSpan","rowSpan","round","padding","withoutTaxTotalAmount","taxTotalAmount","taxIncludedTotalAmount","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33f8bcae.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport DatePicker from 'react-date-picker';\nimport uuid from 'uuid'\nimport './App.sass'\n\nconst VAT_RATE = 0.2\n\ninterface Client {\n  name: string,\n  address: string,\n  intracommunautaryNumber: string,\n  invoiceAddress: string,\n  deliveryAddress: string\n}\n\nclass Service {\n  id: string\n  date: {\n    from: Date,\n    to: Date | null,\n  }\n  title: string\n  quantity: number\n  unitPrice: number\n  VATRate: number\n  withoutTaxAmount: number\n  taxAmount: number\n  taxIncludedAmount: number\n\n  constructor(from: Date, to: Date | null, title: string, quantity: number, unitPrice: number) {\n    this.id = uuid()\n    this.date = {\n      from,\n      to\n    }\n    this.title = title\n    this.quantity = quantity\n    this.unitPrice = unitPrice\n\n    this.VATRate = VAT_RATE\n    this.withoutTaxAmount = quantity * unitPrice\n    this.taxAmount = this.withoutTaxAmount * this.VATRate\n    this.taxIncludedAmount = this.withoutTaxAmount + this.taxAmount\n  }\n}\n\nclass Invoice {\n  date: Date\n  invoiceNumber: string\n  client: Client\n  services: Service[]\n  paymentDate: Date\n\n  constructor(invoiceNumber: string, date: Date, paymentDate: Date, client: Client, services: Service[]) {\n    this.invoiceNumber = invoiceNumber\n    this.date = date\n    this.paymentDate = paymentDate\n    this.client = client\n    this.services = services\n  }\n\n  withoutTaxTotalAmount() {\n    return this.services.reduce((acc, cur) => acc + cur.withoutTaxAmount, 0)\n  }\n  taxTotalAmount() {\n    return this.services.reduce((acc, cur) => acc + cur.taxAmount, 0)\n  }\n\n  taxIncludedTotalAmount() {\n    return this.services.reduce((acc, cur) => acc + cur.taxIncludedAmount, 0)\n  }\n}\n\nconst isInt = (x: number) => x - Math.floor(x) === 0\n\nconst percentFormatted = (x: number) => `${Math.round(x * 100)} %`\nconst defaultFormatted = (x: number) => isInt(x) ? `${x.toLocaleString('fr-FR')}` : `${Number(x.toFixed(2)).toLocaleString('fr-FR')}`\nconst financeFormatted = (x: number) => x.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' })\n\nconst App = () => {\n\n  const [invoiceNumber, setInvoiceNumber] = useState<string>('')\n  const [date, setDate] = useState<Date>(new Date())\n  const [paymentDate, setPaymentDate] = useState<Date | null>(null)\n  const [clientName, setClientName] = useState<string>('')\n  const [clientAddress, setClientAddress] = useState<string[]>([])\n  const [clientIntracommunautariyNumber, setClientIntracommunautariyNumber] = useState<string>('')\n  const [clientInvoiceAddress, setClientInvoiceAddress] = useState<string[]>([])\n  const [clientDeliveryAddress, setClientDeliveryAddress] = useState<string[]>([])\n  const [newServiceStartDate, setNewServiceStartDate] = useState<Date | undefined>(undefined)\n  const [newServiceEndDate, setNewServiceEndDate] = useState<Date | undefined>(undefined)\n  const [newServiceDescription, setNewServiceDescription] = useState<string>('')\n  const [newServiceQuantity, setNewServiceQuantity] = useState<string>('')\n  const [newServiceUnitPrice, setNewServiceUnitPrice] = useState<string>('')\n  const [services, setServices] = useState<Service[]>([])\n  const [invoice, setInvoice] = useState<Invoice | null>(null)\n  const [askedForPrint, setAskedForPrint] = useState<boolean>(false)\n\n  const resetNewServiceData = () => {\n    setNewServiceStartDate(undefined)\n    setNewServiceEndDate(undefined)\n    setNewServiceDescription('')\n    setNewServiceQuantity('')\n    setNewServiceUnitPrice('')\n  }\n\n  const addNewService = () => {\n    try {\n      if (!newServiceStartDate) throw new Error('La date de début est incorrecte')\n      const endDate = newServiceEndDate ? newServiceEndDate : null\n      if (!newServiceDescription) throw new Error('Il manque la description du service')\n      // eslint-disable-next-line no-useless-escape\n      const numberValidator = /^\\d+[\\.|\\,]?\\d*$/\n      if (!numberValidator.test(newServiceQuantity)) throw new Error('La quantité est invalide')\n      if (!numberValidator.test(newServiceUnitPrice)) throw new Error('Le prix unitaire est invalide')\n      setServices(services.concat([new Service(newServiceStartDate, endDate, newServiceDescription, Number(newServiceQuantity), Number(newServiceUnitPrice))]))\n      resetNewServiceData()\n    } catch (e) {\n      alert(e.message)\n    }\n  }\n\n  const removeService = (service: Service) => {\n    const remove = window.confirm(`Es-tu sûr de vouloir supprimer : ${service.title} ?`)\n    if (remove) {\n      setServices(services.filter(s => s.id !== service.id))\n    }\n  }\n\n  const generatePrint = () => {\n    try {\n      if (!invoiceNumber) throw new Error('Il manque le numéro de facture')\n      if (!paymentDate) throw new Error('Il faut choisir une date de paiement')\n      setInvoice(new Invoice(invoiceNumber, date, paymentDate, {\n        name: clientName,\n        intracommunautaryNumber: clientIntracommunautariyNumber,\n        address: clientAddress.join('\\n'),\n        invoiceAddress: clientInvoiceAddress.join('\\n'),\n        deliveryAddress: clientDeliveryAddress.join('\\n')\n      }, services))\n      setAskedForPrint(true)\n    } catch (e) {\n      alert(e.message)\n    }\n  }\n\n  useEffect(() => {\n    if (invoice && askedForPrint) {\n      window.print()\n      setAskedForPrint(false)\n      const savedData = window.localStorage.getItem('invoices')\n      const previousInvoices: Invoice[] = savedData ? JSON.parse(savedData) : []\n      window.localStorage.setItem('invoices', JSON.stringify(previousInvoices.concat([invoice])))\n    }\n  }, [invoice, askedForPrint])\n\n  return (\n    <div className=\"App\">\n      <div id=\"invoiceForm\">\n        <h2>Général</h2>\n        <div className=\"column generalInfo\">\n          <label>\n            <span className=\"bold\">Numéro de facture</span>\n            <input className=\"border-black border-round height-30 mono\" type=\"text\" onChange={event => setInvoiceNumber(event.target.value)} value={invoiceNumber} />\n          </label>\n          <label>\n            <span className=\"bold\">Date de la facture</span>\n            <DatePicker className=\"border-round border-black\" onChange={date => date instanceof Array ? setDate(date[0]) : setDate(date)} value={date} />\n          </label>\n          <label>\n            <span className=\"bold\">Date de paiement</span>\n            <DatePicker className=\"border-round border-black\" onChange={date => date instanceof Array ? setPaymentDate(date[0]) : setPaymentDate(date)} value={paymentDate ? paymentDate : undefined} />\n          </label>\n        </div>\n        <h2>Client</h2>\n        <div className=\"row\">\n          <div className=\"left column flex-end\">\n            <label>\n              <span className=\"bold\">Nom</span>\n              <input className=\"border-black border-round height-30 mono\" type=\"text\" onChange={event => setClientName(event.target.value)} value={clientName} />\n            </label>\n            <label>\n              <span className=\"bold\">N° intracommunautaire</span>\n              <input className=\"border-black border-round height-30 mono\" type=\"text\" onChange={event => setClientIntracommunautariyNumber(event.target.value)} value={clientIntracommunautariyNumber} />\n            </label>\n          </div>\n          <div className=\"right addressBox\">\n            <label>\n              <span className=\"bold\">Adresse</span>\n              <textarea className=\"border-black border-round height-100\" onChange={event => setClientAddress(event.target.value.split('\\n'))} value={clientAddress.join('\\n')} />\n            </label>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"left addressBox\">\n            <label>\n              <span className=\"bold\">Adresse de facturation</span>\n              <textarea className=\"border-black border-round height-100\" onChange={event => setClientInvoiceAddress(event.target.value.split('\\n'))} value={clientInvoiceAddress.join('\\n')} />\n            </label>\n          </div>\n          <div className=\"right addressBox\">\n            <label>\n              <span className=\"bold\">Adresse de livraison</span>\n              <textarea className=\"border-black border-round height-100\" onChange={event => setClientDeliveryAddress(event.target.value.split('\\n'))} value={clientDeliveryAddress.join('\\n')} />\n            </label>\n          </div>\n        </div>\n        <h2>Prestations</h2>\n        <table>\n          <thead>\n            <tr>\n              <td>Début</td>\n              <td>(Fin)</td>\n              <td>Désignation de la prestation</td>\n              <td>Quantité</td>\n              <td>Prix unitaire</td>\n              <td>Action</td>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              services.map(service => {\n                return <tr key={service.id}>\n                  <td className=\"width-80\">\n                    {service.date.from.toLocaleDateString()}\n                  </td>\n                  <td className=\"width-80\">\n                    {service.date.to && service.date.to.toLocaleDateString()}\n                  </td>\n                  <td className=\"width-040\">\n                    {service.title}\n                  </td>\n                  <td className=\"align-center\">\n                    {service.quantity}\n                  </td>\n                  <td className=\"align-center\">\n                    {service.unitPrice}\n                  </td>\n                  <td>\n                    <button className=\"removeService\" onClick={event => {\n                      event.preventDefault()\n                      removeService(service)\n                    }}>-</button>\n                  </td>\n                </tr>\n              })\n            }\n            <tr>\n              <td className=\"width-80\">\n                <DatePicker value={newServiceStartDate} onChange={date => setNewServiceStartDate(date instanceof Array ? date[0] : date)} />\n              </td>\n              <td className=\"width-80\">\n                <DatePicker value={newServiceEndDate} onChange={date => setNewServiceEndDate(date instanceof Array ? date[0] : date)} />\n              </td>\n              <td className=\"width-040\">\n                <input type=\"text\" className=\"border-black border-round height-30 full-width font-14\" value={newServiceDescription} onChange={event => setNewServiceDescription(event.target.value)} />\n              </td>\n              <td className=\"align-center\">\n                <input type=\"number\" className=\"border-black border-round height-30 mono width-80 font-14\" value={newServiceQuantity} onChange={event => setNewServiceQuantity(event.target.value)} />\n              </td>\n              <td className=\"align-center\">\n                <input type=\"number\" className=\"border-black border-round height-30 mono width-80 font-14\" value={newServiceUnitPrice} onChange={event => setNewServiceUnitPrice(event.target.value)} />\n              </td>\n              <td>\n                <button id=\"addService\" onClick={event => {\n                  event.preventDefault()\n                  addNewService()\n                }}>+</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <div className=\"footer\">\n          {invoiceNumber && paymentDate && clientName && clientIntracommunautariyNumber && clientAddress.length && clientAddress[0] && !!services.length && (<button id=\"printButton\" onClick={async () => {\n            generatePrint()\n          }}>Imprimer la facture</button>)}\n        </div>\n      </div>\n\n      {invoice && (\n        <div id=\"invoicePrint\">\n          <h1 className=\"title\">Facture</h1>\n          <div className=\"generalInfo\">\n            <div className=\"left\">\n              <div className=\"block\">\n                <p className=\"bold\">ESAPE</p>\n                <p>6 rue de Bois-Bernard</p>\n                <p>62580 NEUVIREUIL</p>\n              </div>\n              <div className=\"block\">\n                <p>SARL ESAPE</p>\n                <p>Au capital social de 22 500,00 euros</p>\n              </div>\n              <div className=\"block\">\n                <p>RCS ARRAS 812.462.307</p>\n                <p>TVA intracommunautaire: fr 33812462307</p>\n              </div>\n            </div>\n            <div className=\"right\">\n              <div className=\"block\">\n                <p className=\"align-right\">Date : {invoice.date.toLocaleDateString()}</p>\n                <p className=\"align-right bold\">Facture n° {invoice.invoiceNumber}</p>\n              </div>\n            </div>\n          </div>\n          <table>\n            <thead>\n              <tr>\n                <td colSpan={2} className=\"nowrap border-right\">Références client</td>\n                <td className=\"nowrap border-right\">Adresse de facturation</td>\n                <td className=\"nowrap\">Adresse de livraison</td>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td className=\"align-right bold\">Nom :</td>\n                <td className=\"align-center border-right\">{invoice.client.name}</td>\n                <td rowSpan={3} className=\"align-center border-right pre-line\">{invoice.client.invoiceAddress}</td>\n                <td rowSpan={3} className=\"align-center pre-line\">{invoice.client.deliveryAddress}</td>\n              </tr>\n              <tr>\n                <td className=\"align-right bold\">Adresse :</td>\n                <td className=\"align-center pre-line\">{invoice.client.address}</td>\n              </tr>\n              <tr>\n                <td className=\"align-right nowrap bold\">N° intracommunautaire :</td>\n                <td className=\"align-center\">{invoice.client.intracommunautaryNumber}</td>\n              </tr>\n            </tbody>\n          </table>\n\n          <table>\n            <thead>\n              <tr>\n                <td className=\"border-right\">Date</td>\n                <td className=\"border-right\">Désignation de la prestation</td>\n                <td className=\"border-right\">Quantité</td>\n                <td className=\"border-right\">Prix unitaire</td>\n                <td className=\"border-right\">Taux de TVA</td>\n                <td className=\"border-right\">Montant total HT</td>\n                <td className=\"border-right\">Montant TVA</td>\n                <td>Montant TTC</td>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                invoice.services.map(service => (\n                  <tr key={service.id}>\n                    <td className=\"border-right\">\n                      {service.date.from.toLocaleDateString()}\n                      {service.date.to && (\n                        ` au ${service.date.to.toLocaleDateString()}`\n                      )}\n                    </td>\n                    <td className=\"border-right\">{service.title}</td>\n                    <td className=\"nowrap align-center border-right\">{defaultFormatted(service.quantity)}</td>\n                    <td className=\"nowrap align-center border-right\">{financeFormatted(service.unitPrice)}</td>\n                    <td className=\"nowrap align-center border-right\">{percentFormatted(service.VATRate)}</td>\n                    <td className=\"nowrap align-right border-right\">{financeFormatted(service.withoutTaxAmount)}</td>\n                    <td className=\"nowrap align-right border-right\">{financeFormatted(service.taxAmount)}</td>\n                    <td className=\"nowrap align-right\">{financeFormatted(service.taxIncludedAmount)}</td>\n                  </tr>\n                ))\n              }\n              <tr>\n                <td className=\"border-right\" style={{\n                  padding: 10\n                }}></td>\n                <td className=\"border-right\"></td>\n                <td className=\"border-right\"></td>\n                <td className=\"border-right\"></td>\n                <td className=\"border-right\"></td>\n                <td className=\"border-right\"></td>\n                <td className=\"border-right\"></td>\n                <td className=\"border-right\"></td>\n              </tr>\n\n            </tbody>\n            <tfoot>\n              <tr>\n                <td className=\"nowrap border-right\">Totaux</td>\n                <td className=\"border-right\"></td>\n                <td className=\"border-right\"></td>\n                <td className=\"border-right\"></td>\n                <td className=\"border-right\"></td>\n                <td className=\"nowrap align-right border-right\">{financeFormatted(invoice.withoutTaxTotalAmount())}</td>\n                <td className=\"nowrap align-right border-right\">{financeFormatted(invoice.taxTotalAmount())}</td>\n                <td className=\"nowrap align-right border-right\">{financeFormatted(invoice.taxIncludedTotalAmount())}</td>\n              </tr>\n            </tfoot>\n          </table>\n\n          <div className=\"maybe-page2\">\n            <div className=\"generalInfo padding-top-24\">\n              <div className=\"left\">\n                <table className=\"conditions\">\n                  <thead>\n                    <tr>\n                      <td colSpan={2}>Conditions de règlement</td>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td className=\"align-right\">Date de règlement :</td>\n                      <td className=\"align-center\">{invoice.paymentDate.toLocaleDateString()}</td>\n                    </tr>\n                    <tr>\n                      <td className=\"align-right\">Mode de règlement :</td>\n                      <td className=\"align-center fluf\">Chèque ou virement</td>\n                    </tr>\n                    <tr>\n                      <td className=\"align-right\">Conditions d'escompte :</td>\n                      <td className=\"align-center\"></td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n              <div className=\"right\">\n                <table className=\"toPayTable\">\n                  <tbody>\n                    <tr>\n                      <td className=\"bold align-right\">Somme à payer (HT)</td>\n                      <td className=\"bold align-right\">{financeFormatted(invoice.withoutTaxTotalAmount())}</td>\n                    </tr>\n                    <tr>\n                      <td className=\"bold align-right\">TVA (20 %)</td>\n                      <td className=\"bold align-right\">{financeFormatted(invoice.taxTotalAmount())}</td>\n                    </tr>\n                    <tr>\n                      <td className=\"bold align-right\">Somme à payer (TTC)</td>\n                      <td className=\"bold align-right\">{financeFormatted(invoice.taxIncludedTotalAmount())}</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n\n            <p className=\"notice\">En cas de retard, le taux d'intérêt des pénalités de retard + montant de l'indemnité forfaitaire (40€) sera applicable conformément à l'article L.441-6, alinéa 12 du Code du commerce</p>\n          </div>\n        </div>\n      )}\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}